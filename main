# load supporing R code for database access
source("utils.R")

user_id  <- 'QFVTHD7'
tera_dsn <- 'EDWPROD'
db2_dsn  <- 'db2p81'

library(DBI)
library(odbc)

# establish connection to Teradata and DB2
tera_con <- dbConnect(odbc(), dsn = tera_dsn, uid = user_id, pwd = getPassword('Please enter your Teradata password!'))
db2_con <- dbConnect(odbc(), dsn = db2_dsn, uid = user_id, pwd = getPassword('Please enter your DB2 password!'))

library(lubridate)
snap_dt <- ymd('2017-05-31')
dt_begin <- ymd('2016-06-01')
dt_end   <- ymd('2017-05-31')

library(stringr)

# ------------------- Client_Base ------------------- 
# sql_txt <- read_sql('SQL/Client_Base.sql')

# Client_Base2.sql will create a volatile table 'Client_Base' in Teradata server
# Server-side copy is convenient when joining tables on server
sql_txt <- read_sql('SQL/Client_Base2.sql')
query <- subsql(sql_txt, snap_dt = snap_dt)
res <- dbSendQuery(tera_con, query)

# Retrieve a local version of Client_Base
res <- dbSendQuery(tera_con, "select * from Client_Base;")
client_base <- dbFetch(res) %>% as.tbl

# make sure char is encoded in latin1
# client_base[which(stringi::stri_enc_mark(client_base$OCCPT_DESC) == 'UTF-8'), ]
client_base <- enc2latin1(client_base)

# trim leading and trailing white spaces
client_base <- client_base %>%
    mutate_if(is.character, trimws)

# ------------------- Client_ReTO_Bus ------------------- 
# sql_txt <- read_sql('SQL/Client_ReTo_Bus.sql')
sql_txt <- read_sql('SQL/Client_ReTo_Bus2.sql')
query <- subsql(sql_txt, snap_dt = snap_dt)
res <- dbSendQuery(tera_con, query)
client_bus <- dbFetch(res) %>% as.tbl 
client_bus <- client_bus %>%
  filter(CLNT_NO %in% unique(client_base$CLNT_NO)) %>%
  mutate_if(is.character, trimws)

# ------------------- Joint_Acct_Holder ------------------- 
# sql_txt <- read_sql('SQL/Joint_Acct_Holder.sql')
sql_txt <- read_sql('SQL/Joint_Acct_Holder2.sql')
query <- subsql(sql_txt, snap_dt = snap_dt)
res <- dbSendQuery(tera_con, query)
joint_acct_holder <- dbFetch(res) %>% as.tbl 
joint_acct_holder <- joint_acct_holder %>%
  filter(CLNT_NO %in% unique(client_base$CLNT_NO)) %>%
  mutate_if(is.character, trimws)

# ------------------- Country_Risk -------------------
sql_txt <- read_sql('SQL/Country_Risk.sql')
query <- subsql(sql_txt)
res <- dbSendQuery(db2_con, query)
country_risk <- dbFetch(res) %>% as.tbl 

country_risk <- country_risk %>%
  mutate_if(is.character, trimws)

# ------------------- obtain client's relation to business Risk Profile -------------------
# client_bus_clean will be ready for use
source('client_bus.R')

# ------------------- obtain Joint Account Holder's Risk Profile --------------------------
# joint_acct_holder_clean will be ready for use
source('Joint_Acct_Holder_Risk.R')

# ------------------- Client Base All -----------------------------------------------------
client_base_all <- client_base %>%
  left_join(country_risk, by = c('CNTRY_CD_ALPHA2' = 'CNTRY_CD_ALPHA')) %>%
  left_join(country_risk, by = c('mailing_alpha2' = 'CNTRY_CD_ALPHA'), suffix = c(".b", ".c")) %>%
  select(colnames(client_base),
         CNTRY_NM.b,
         RSK_RTG_DESC.b,
         CNTRY_NM.c,
         RSK_RTG_DESC.c) %>%
  rename(CNTRY_NM = CNTRY_NM.b,
         CNTRY_RSK_RTG = RSK_RTG_DESC.b,
         MAIL_CNTRY_NM = CNTRY_NM.c,
         MAIL_CNTRY_RSK_RTG = RSK_RTG_DESC.c) %>% 
  mutate(CLNT_NM = str_c(str_trim(NM_GIVEN), str_trim(NM_SURNM), sep = " "))


# ------------------- STR ----------------------------------------------------------------
# sql_txt <- read_sql('SQL/New_STR.sql')
# query <- subsql(sql_txt, SRC_CLNT_ID = paste("'", client_base[['SRC_CLNT_ID']], "'", sep = '', collapse = ','))

sql_txt <- read_sql('SQL/New_STR2.sql')
query <- subsql(sql_txt)
res <- dbSendQuery(tera_con, query)
new_str <- dbFetch(res) %>% as.tbl

sql_txt <- read_sql('SQL/Old_STR.sql')
query <- subsql(sql_txt)
res <- dbSendQuery(db2_con, query)
old_str <- dbFetch(res) %>% as.tbl

# library(readr)
# old_str <- read_csv('OLD_STR_RAW.csv')

source('STR.R')
  

# ------------------- Media Scanning --------------------------------------------------------
sql_txt <- read_sql('SQL/Media_Case.sql')
query <- subsql(sql_txt)
res <- dbSendQuery(tera_con, query)
media_case <- dbFetch(res) %>% as.tbl

sql_txt <- read_sql('SQL/Media_Alert.sql')
query <- subsql(sql_txt)
res <- dbSendQuery(tera_con, query)
media_alert <- dbFetch(res) %>% as.tbl

media_scan <- bind_rows(media_case %>% select(CLNT_NO),
                        media_alert %>% select(CLNT_NO)) %>% 
  mutate(MEDIAN_SCAN_IND = 'Y') %>% 
  distinct() %>% 
  arrange(CLNT_NO)
          
# ------------------- Last Closed CFR Case --------------------------------------------------------
sql_txt <- read_sql('SQL/CFR.sql')
query <- subsql(sql_txt)
res <- dbSendQuery(tera_con, query)
closed_cfr <- dbFetch(res) %>% as.tbl

closed_cfr %>% 
  group_by(CLNT_NO) %>% 
  summarize(LAST_CFR_CLOSE_DT = max(CAPTR_DT))

# ------------------- NRC --------------------------------------------------------
sql_txt <- read_sql('SQL/NRC.sql')
query <- subsql(sql_txt)
res <- dbSendQuery(tera_con, query)
nrc <- dbFetch(res) %>% as.tbl

country_conn <- nrc %>% 
  mutate(CLNT_NO = as.integer(substr(RELTN_ENTY_KEY, 7, 16))) %>% 
  select(-RELTN_ENTY_KEY) %>% 
  arrange(CLNT_NO)

# ------------------- Credit Card Only --------------------------------------------------------
# sql_txt <- read_sql('SQL/Credit_Card.sql')
sql_txt <- read_sql('SQL/Credit_Card2.sql')
query <- subsql(sql_txt, snap_dt = snap_dt)
res <- dbSendQuery(tera_con, query)
active_acct <- dbFetch(res) %>% as.tbl

active_acct %>% 
  distinct(CLNT_NO) %>% 
  mutate(ACTIVE_IND = 'A') %>% 
  arrange(CLNT_NO)

card_sts_fmt <- tibble(OPEN_CLS_STS = c('IC', 'FR','OP','BK','CO','TR','VC','WO'),
                       CARD_STS = c('Involuntary Closure',
                                    'Fraud',
                                    'OPEN',
                                    'Bankrupt',
                                    'Collection',
                                    'Transfer',
                                    'Voluntary Closure',
                                    'Write-Off'))

card_only <- active_acct %>% 
  filter(SRVC_ID == 22) %>% 
  anti_join(active_acct %>% filter(SRVC_ID != 22) %>% distinct(CLNT_NO), by = "CLNT_NO") %>% 
  distinct(CLNT_NO, OPEN_CLS_STS) %>% 
  mutate(CARD_ONLY = 'Yes') %>% 
  left_join(card_sts_fmt, by = c('OPEN_CLS_STS' = 'OPEN_CLS_STS'))

card_only <- card_only %>% 
  group_by(CLNT_NO, CARD_ONLY) %>% 
  arrange(OPEN_CLS_STS) %>% 
  summarize(STS = paste(CARD_STS, collapse = ','))

# ============================== Combine All The Information ==============================
# read saved data from DATA folder. 
# These datasets are referenced in April's SAS code, but created elsewhere
library(haven)
all_client_avg_bal_div <- read_sas('DATA/allclnt_ave_bal_div.sas7bdat')
red_flag <- read_sas('DATA/redflag.sas7bdat')
tot_crdr_person <- read_sas('DATA/tot_crdr_person.sas7bdat')
wire_max_rsk_country <- read_sas('DATA/wire_maxriskcntry.sas7bdat')
new_rate <- read_sas('DATA/new_rate.sas7bdat')

# combining tables
x <- client_base_all %>% 
  rename(SegmentCodeO = SegmentCode) %>% 
  left_join(joint_acct_holder_clean, by = c('CLNT_NO' = 'CLNT_NO')) %>% 
  left_join(client_bus_clean, by = c('CLNT_NO' = 'CLNT_NO')) %>% 
  left_join(str_summary %>% rename(LAST_STR_DATE1 = LAST_STR_DATE,
                                   LAST_REL_STR_DATE1 = LAST_REL_STR_DATE),
            by = c('CLNT_NO' = 'CLNT_NO')) %>% 
  left_join(media_scan, by = c('CLNT_NO' = 'CLNT_NO')) %>% 
  left_join(closed_cfr, by = c('CLNT_NO' = 'CLNT_NO')) %>% 
  left_join(all_client_avg_bal_div %>% select(-CLNT_TYP, -DIV_ID),
            by = c('CLNT_NO' = 'CLNT_NO')) %>% 
  left_join(red_flag %>% 
              rename(HIGH_RISK_ENTITY = `High Risk Entity`,
                     HIGH_RISK_GEOGRAPHY = `High Risk Geography`,
                     COUNTER_PARTY = `Counter Party`,
                     NATURE_OF_TRANSACTION = `Nature of transaction`,
                     UNEXPECTED_TXN_BEHAVIOR = `Unexpected Transaction Behavior`) %>% 
              select(-CLNT_TYP, -DIV_ID),
            by = c('CLNT_NO' = 'clnt_no')) %>% 
  left_join(tot_crdr_person %>% select(-DIV_ID), by = c('CLNT_NO' = 'CLNT_NO')) %>% 
  left_join(wire_max_rsk_country, by = c('CLNT_NO' = 'clnt_no')) %>% 
  left_join(country_conn, by = c('CLNT_NO' = 'CLNT_NO')) %>% 
  left_join(card_only %>% rename(CARD_STATUS = STS), by = c('CLNT_NO' = 'CLNT_NO')) %>% 
  left_join(new_rate, by = c('CLNT_NO' = 'clnt_no'))

# ------------------------- Begin Logic --------------------------------------------------
x <- x %>% 
  # Label Iran related clients 
  mutate(SANCTION_CONN = case_when(str_detect(SegmentCodeO, 'IR') ~ 'Y',
                                   TRUE ~ 'N')) %>% 
  # if recent EDD done, then remove
  # Note: a lot are NA, need to keep
  filter(EDD_COMPL_DT < ymd('2015-05-31') | is.na(EDD_COMPL_DT)
         # CARD_ONLY != 'Yes' | open_cls_status %in% c('OP', 'CO')
         )

z <- x %>% 
  mutate(CNTRY_CD_ALPHA2 = case_when(is.na(CNTRY_NM) ~ mailing_alpha2,
                                     TRUE ~ CNTRY_CD_ALPHA2),
         CNTRY_NM = case_when(is.na(CNTRY_NM) ~ MAIL_CNTRY_NM,
                              TRUE ~ CNTRY_NM),
         CNTRY_RSK_RTG = case_when(is.na(CNTRY_NM) ~ MAIL_CNTRY_RSK_RTG,
                                   TRUE ~ CNTRY_RSK_RTG),
         SegmentCodeO = case_when(is.na(CNTRY_NM) 
                                  & MAIL_CNTRY_RSK_RTG %in% c('HIGH1', 'HIGH2', 'HIGH3', 'RESTRICTED')
                                  & !str_detect(SegmentCodeO, 'NRHRC') ~ paste0('NRHRC,', SegmentCodeO),
                                  TRUE ~ SegmentCodeO),
         new_segmcode = case_when(is.na(CNTRY_NM) 
                                  & MAIL_CNTRY_RSK_RTG %in% c('HIGH1', 'HIGH2', 'HIGH3', 'RESTRICTED')
                                  & str_detect(SegmentCodeO, 'SDRSK') ~ str_replace(new_segmcode, '(SDRSK[ ]*,*[ ]*)', ''),
                                  TRUE ~ new_segmcode)
         
         
         )



# ============================== Close Database Connection ================================
dbDisconnect(tera_con)
dbDisconnect(db2_con)
# ========================================================================================= #



         
